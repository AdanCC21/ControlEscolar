@page "/ListarMaterias"

@using Servicios;
@using Entidades.Modelos;

@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Routing;

@inject MateriaServicios materiaServ
@inject NavigationManager navigationManager

<div class="container">
	<h4 class="fw-bold mt-3 mb-3 "> Gestión de Materias General</h4>
	<div class="row p-2 mt-3 border border-1 border-success">
		<div class="col-2">
			<h6 class="card-title text-success fw-bold mt-2">Listado de Materias</h6>
		</div>
		<div class="col-5">
			<InputText @bind-Value="criterioBusqueda" class="form-control" placeholder="Criterio de búsqueda"></InputText>
		</div>
		<div class="col-3">
			<button class="btn btn-outline-success" @onclick="()=>BuscarMateria(0)"><i class="bi bi-search"> Buscar</i></button>
		</div>
		<div class="col-2 align-content-end">
			<NavLink href="Insertarmateria" class="btn btn-success"><i class="bi bi-plus-circle-fill"></i>&nbsp; Nueva Materia</NavLink>
		</div>
	</div>

	<div class="row mt-3 mb-5">
		<div>
			<p class="fw-bold">Existen: @LstMaterias.Count() materias.</p>
		</div>
		<table class="table table-striped table-bordered">
			<thead>
				<tr class="text-center">
					<th>IdMateria</th>
					<th>CLAVE</th>
					<th>NOMBRE</th>
					<th>IdCarrera</th>
				</tr>
			</thead>
			<tbody>
				@if (!LstMaterias.Any())
				{
					<tr>
						<td class="text-center fw-bold text-danger" colspan="5">No hay materias registradas.</td>
					</tr>
				}
				else
				{
					foreach (var materia in LstMaterias)
					{
						<tr class="text-center">
							<td>@materia.IdMateria</td>
							<td class="text-lg-start">@materia.ClaveMateria</td>
							<td class="align-content-center">@materia.NombreMateria</td>
							<td class="align-content-center">@materia.IdCarrera</td>
							<td class="text-center">
								<NavLink href="@($"Modificarmateria/{materia.IdMateria}")" class="btn btn-sm btn-outline-primary" data-toggle="tooltip" title="Edita los datos de la materia"><i class="bi bi-pen"></i></NavLink>
								<NavLink href="@($"AgregarMateriasmateria/{materia.IdMateria}")" class="btn btn-sm btn-outline-warning" data-toggle="tooltip" title="Agregar materias a la materia"><i class="bi bi-layout-text-sidebar"></i></NavLink>
								<button class="btn btn-outline-danger btn-sm" data-toggle="tooltip" title="Borra los datos de la materia" @onclick="()=>Borrarmateria(materia.IdMateria)"> <i class="bi bi-trash-fill"></i> </button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>


@code {
	/// <summary>
	/// Lista enumerable que contiene los registros de materias.
	/// Se inicializa como una nueva lista vacía para evitar referencias nulas.
	/// </summary>
	private IEnumerable<E_Materia> LstMaterias { get; set; } = new List<E_Materia>();

	/// <summary>
	/// Almacena el criterio de búsqueda ingresado por el usuario.
	/// Inicializado como string vacío para evitar valores nulos.
	/// </summary>
	private string criterioBusqueda { get; set; } = string.Empty;

	/// <summary>
	/// Mensaje utilizado para mostrar información al usuario (éxito, errores, etc.).
	/// Inicializado como string vacío.
	/// </summary>
	private string msg = string.Empty;

	/// <summary>
	/// Método del ciclo de vida del componente que se ejecuta cuando el componente se inicializa.
	/// Carga la lista inicial de materias desde el servicio.
	/// </summary>
	/// <returns>Tarea asíncrona</returns>
	protected override async Task OnInitializedAsync()
	{
		LstMaterias = await materiaServ.ListarMaterias();
	}

	/// <summary>
	/// Busca materias según el criterio proporcionado.
	/// El criterio se aplica a múltiples campos (Clavemateria, Nombremateria, Aliasmateria).
	/// </summary>
	/// <param name="criterioBusqueda">Texto de búsqueda que se comparará con los campos de materia</param>
	/// <returns>Tarea asíncrona</returns>
	/// <remarks>
	/// Actualiza la lista LstMaterias con los resultados de la búsqueda.
	/// La búsqueda es case-insensitive y utiliza comparación parcial (LIKE).
	/// </remarks>
	private async Task BuscarMateria(int id)
	{
		E_Materia temp;
		temp = await materiaServ.BuscarMateria(id);
	}

	/// <summary>
	/// Elimina una materia específica y actualiza la lista de materias.
	/// </summary>
	/// <param name="idmateria">ID de la materia a eliminar</param>
	/// <returns>Tarea asíncrona</returns>
	/// <remarks>
	/// Después de eliminar la materia, se recarga la lista completa para reflejar los cambios.
	/// Considerar implementar confirmación antes de eliminar en la interfaz de usuario.
	/// </remarks>
	private async Task Borrarmateria(int idmateria)
	{
		await materiaServ.BorrarMateira(idmateria);
		LstMaterias = await materiaServ.ListarMaterias();
	}
}